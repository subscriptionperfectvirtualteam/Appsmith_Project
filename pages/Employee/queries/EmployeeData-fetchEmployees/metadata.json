{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "fetchEmployees",
    "fullyQualifiedName": "EmployeeData.fetchEmployees",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Employee",
    "collectionId": "Employee_EmployeeData",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n\tconst token = \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im13dHJvc21rY2lwZ2JndXV2cGNqIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MDM4MTE3OSwiZXhwIjoyMDU1OTU3MTc5fQ.4Dj0-EfrpOpu2Bp8Q7GXsT2dWMCop3l9pv48bqBfLuo\";\n\tconst key = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im13dHJvc21rY2lwZ2JndXV2cGNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAzODExNzksImV4cCI6MjA1NTk1NzE3OX0.oDXFbH016Vst-RXtt_uCs9KGtAITW4rQZHoICWWA9t4\";\n\n\tconst rangeHeader = this.getRange();\n\t\n\t// Start building the query URL\n\tlet apiUrl = `https://mwtrosmkcipgbguuvpcj.supabase.co/rest/v1/employee?select=id,first_name,last_name,email,department,designation_role,employee_status`;\n\t\n\t// Add filters if they exist\n\tif (this.selectedFilters.department) {\n\t\tapiUrl += `&department=eq.${encodeURIComponent(this.selectedFilters.department)}`;\n\t}\n\n\t// Fetch data with the pagination range and filters\n\tconst response = await fetch(apiUrl, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Authorization': token,\n\t\t\t'apikey': key,\n\t\t\t'Range': rangeHeader,\n\t\t\t'Content-Type': 'application/json',\n\t\t}\n\t});\n\n\tif (response.ok) {\n\t\tconst data = await response.json();\n\n\t\t// Set the total count of records\n\t\tconst totalRecords = response.headers.get('X-Total-Count');\n\t\tif (totalRecords) {\n\t\t\t// Update table widget with total records for pagination\n\t\t\tEmployeeTable.setTotalRecords(totalRecords);\n\t\t}\n\n\t\treturn data;\n\t} else {\n\t\tconsole.error(\"Error fetching employee data:\", response.status);\n\t\treturn [];\n\t}\n}",
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": true,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n\tconst token = \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im13dHJvc21rY2lwZ2JndXV2cGNqIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MDM4MTE3OSwiZXhwIjoyMDU1OTU3MTc5fQ.4Dj0-EfrpOpu2Bp8Q7GXsT2dWMCop3l9pv48bqBfLuo\";\n\tconst key = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im13dHJvc21rY2lwZ2JndXV2cGNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAzODExNzksImV4cCI6MjA1NTk1NzE3OX0.oDXFbH016Vst-RXtt_uCs9KGtAITW4rQZHoICWWA9t4\";\n\n\tconst rangeHeader = this.getRange();\n\t\n\t// Start building the query URL\n\tlet apiUrl = `https://mwtrosmkcipgbguuvpcj.supabase.co/rest/v1/employee?select=id,first_name,last_name,email,department,designation_role,employee_status`;\n\t\n\t// Add filters if they exist\n\tif (this.selectedFilters.department) {\n\t\tapiUrl += `&department=eq.${encodeURIComponent(this.selectedFilters.department)}`;\n\t}\n\n\t// Fetch data with the pagination range and filters\n\tconst response = await fetch(apiUrl, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Authorization': token,\n\t\t\t'apikey': key,\n\t\t\t'Range': rangeHeader,\n\t\t\t'Content-Type': 'application/json',\n\t\t}\n\t});\n\n\tif (response.ok) {\n\t\tconst data = await response.json();\n\n\t\t// Set the total count of records\n\t\tconst totalRecords = response.headers.get('X-Total-Count');\n\t\tif (totalRecords) {\n\t\t\t// Update table widget with total records for pagination\n\t\t\tEmployeeTable.setTotalRecords(totalRecords);\n\t\t}\n\n\t\treturn data;\n\t} else {\n\t\tconsole.error(\"Error fetching employee data:\", response.status);\n\t\treturn [];\n\t}\n}"
    ],
    "userSetOnLoad": true,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": [],
    "confirmBeforeExecute": false
  },
  "id": "Employee_EmployeeData.fetchEmployees",
  "deleted": false,
  "gitSyncId": "Employee_EmployeeData.fetchEmployees"
}